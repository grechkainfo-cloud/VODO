// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Vodo.DAL.Context;

#nullable disable

namespace Vodo.DAL.Migrations
{
    [DbContext(typeof(VodoContext))]
    partial class VodoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("Vodo.Models.Contractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Inn")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Payload")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("Vodo.Models.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Geometry>("Geometry")
                        .HasColumnType("GEOMETRY")
                        .HasAnnotation("Sqlite:Srid", 4326);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Vodo.Models.EventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Payload")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp", "Entity", "EntityId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("Vodo.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DaysOverdue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Geometry>("Geometry")
                        .HasColumnType("GEOMETRY")
                        .HasAnnotation("Sqlite:Srid", 4326);

                    b.Property<Guid>("JobObjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("JobObjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Vodo.Models.JobComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobComments");
                });

            modelBuilder.Entity("Vodo.Models.JobMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Meta")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TakenAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobMedias");
                });

            modelBuilder.Entity("Vodo.Models.JobObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("TEXT");

                    b.Property<Point>("Location")
                        .HasColumnType("POINT")
                        .HasAnnotation("Sqlite:Srid", 4326);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerDivision")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("JobObjects");
                });

            modelBuilder.Entity("Vodo.Models.JobStream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("JobObjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LatencyMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId", "IsActive");

                    b.HasIndex("JobObjectId", "IsActive");

                    b.ToTable("JobStreams");
                });

            modelBuilder.Entity("Vodo.Models.Job", b =>
                {
                    b.HasOne("Vodo.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Vodo.Models.JobObject", "JobObject")
                        .WithMany("Jobs")
                        .HasForeignKey("JobObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Vodo.Models.PlannedActualPeriod", "PlannedFact", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("FactEnd")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("FactStart")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("PlannedEnd")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("PlannedStart")
                                .HasColumnType("TEXT");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Contractor");

                    b.Navigation("JobObject");

                    b.Navigation("PlannedFact")
                        .IsRequired();
                });

            modelBuilder.Entity("Vodo.Models.JobComment", b =>
                {
                    b.HasOne("Vodo.Models.Job", "Job")
                        .WithMany("Comments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Vodo.Models.JobMedia", b =>
                {
                    b.HasOne("Vodo.Models.Job", "Job")
                        .WithMany("Media")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Vodo.Models.JobObject", b =>
                {
                    b.HasOne("Vodo.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.OwnsOne("Vodo.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("JobObjectId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("District")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Line1")
                                .HasMaxLength(200)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Line2")
                                .HasMaxLength(200)
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT");

                            b1.HasKey("JobObjectId");

                            b1.ToTable("JobObjects");

                            b1.WithOwner()
                                .HasForeignKey("JobObjectId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Vodo.Models.JobStream", b =>
                {
                    b.HasOne("Vodo.Models.Job", "Job")
                        .WithMany("Streams")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Vodo.Models.JobObject", "JobObject")
                        .WithMany("Streams")
                        .HasForeignKey("JobObjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Job");

                    b.Navigation("JobObject");
                });

            modelBuilder.Entity("Vodo.Models.Job", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Media");

                    b.Navigation("Streams");
                });

            modelBuilder.Entity("Vodo.Models.JobObject", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Streams");
                });
#pragma warning restore 612, 618
        }
    }
}
